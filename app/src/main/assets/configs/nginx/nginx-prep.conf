
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  "---CACHE_DIR---/access.log"  combined;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       127.0.0.1:4080;
        server_name  localhost;

        root   "---HTML_DIR---";

        #charset koi8-r;

        #access_log  logs/host.access.log  main;


        #location / {
        #    index  index.php index.html index.htm;
        #    try_files $uri $uri/ /index.php?$query_string;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        # Location for wiki's entry points
        location ~ ^/(mw-config/)?(index|load|api|thumb|opensearch_desc|rest|img_auth)\.php$ {
            # Use the following "location", instead, to disable the MediaWiki web installer/updater.
            # location ~ ^/w/(index|load|api|thumb|opensearch_desc|rest|img_auth)\.php$ {
            fastcgi_pass   127.0.0.1:9000;
            #fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        # Images
        location /images {
            root           "---TARGET_DIR---";
            # Separate location for images/ so .php execution won't apply
            # as required starting from v1.40
            add_header X-Content-Type-Options "nosniff";
            # Serve uploaded HTML as plaintext, don't execute SHTML
            types { text/plain html htm shtml phtml; }
        }
        location /images/deleted {
            root           "---TARGET_DIR---";
            # Deny access to deleted images folder
            deny all;
        }

	    # MediaWiki assets (usually images)
        location ~ ^/resources/(assets|lib|src) {
            try_files $uri =404;
            add_header Cache-Control "public";
            expires 7d;
        }

        # Assets, scripts and styles from skins and extensions
        location ~ ^/(skins|extensions)/.+\.(css|js|gif|jpg|jpeg|png|svg|wasm|ttf|woff|woff2)$ {
            try_files $uri =404;
            add_header Cache-Control "public";
            expires 7d;
        }

        # Favicon
        location = /favicon.ico {
            alias "---TARGET_DIR---/images/6/64/Favicon.ico";
            add_header Cache-Control "public";
            expires 7d;
            access_log     off;
            log_not_found  off;
        }

        # License and credits files
        location ~ ^/(COPYING|CREDITS)$ {
            default_type text/plain;
        }

        # Handling for Mediawiki REST API, see [[mw:API:REST_API]]
        location /rest.php/ {
            try_files $uri $uri/ /rest.php?$query_string;
        }

        ## Uncomment the following code for handling image authentication
        ## Also add "deny all;" in the location for /images above
        #location /img_auth.php/ {
        #	try_files $uri $uri/ /img_auth.php?$query_string;
        #}

        # Handling for the article path (pretty URLs)
        location /wiki/ {
            rewrite ^/wiki/(?<pagename>.*)$ /index.php;
        }

        # Explicit access to the root website, redirect to main page (adapt as needed)
        location = / {
            return 301 /wiki/Main_Page;
        }

        # Every other entry point will be disallowed.
        # Add specific rules for other entry points/images as needed above this
        location / {
            return 404;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
